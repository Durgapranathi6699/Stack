class Solution
{
    //Function to calculate the span of stockâ€™s price for all n days.
    public static int[] calculateSpan(int price[], int n)
    {
        int[] ans=new int[n];
    //   Map<Integer,Integer> map=new HashMap<>();
    //   for(int i=0;i<price.length;i++){
    //       map.put(i,price[i]);
    //   }
      int j=0;
    //   for(Map.Entry<Integer,Integer> e:map.entrySet()){
    //       int a=e.getValue();
    //       int b=e.getKey();
    //       int count=0;
    //       for(int i=b-1;i>=0;i--){
    //           if(price[i]<a){
    //               count++;
    //           }else{
    //               break;
    //           }
    //       }
    //       ans[j]=count+1;
    //       count=0;
    //       j++;
    //   }
    //   return ans;
    Stack<Integer> s=new Stack<>();
      s.push(0);
      ans[0]=1;
      for(int i=1;i<n;i++){
          while(!s.empty() && price[s.peek()]<=price[i]){
              s.pop();
          }
              if(s.empty()){
                  ans[i]=i+1;
              }
              else{
                  ans[i]=i-s.peek();
              }
              s.push(i);
          
      }
          return ans;
      }
 }
 
 /*
 100 0
80  1
60  2
70  3
60  4
75  5
85  6

          pop(3)     pop(1) pop(2) pop(2)   pop(3)
stack 100  80    60   70       60       75      85
       0    1     2    3        4        5       6
  ans   1   1-0   2-1   3-1=2   4-3=1    5-1=4   6-0=6
 */
