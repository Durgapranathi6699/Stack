class Solution {
    public int trap(int[] height) {
       int left=0;
       int right=height.length-1;
       int leftmax=0;
       int rightmax=0;
       int ans=0;
       while(left<=right){
           if(height[left]<=height[right]){
               if(height[left]>leftmax)leftmax=height[left];
               else ans+=leftmax-height[left];
               left++;
           }else{
               if(height[right]>rightmax)rightmax=height[right];
               else ans+=rightmax-height[right];
               right--;
           }
       }
       return ans;
    }
}

//  //min(left height,right height)-height[i]

//         int left[]=new int[height.length];
//         int right[]=new int[height.length];
//         left[0]=height[0];
//         for(int i=1;i<height.length;i++){
//             left[i]=Math.max(height[i],left[i-1]);
    
//         }
      
//         right[right.length-1]=height[height.length-1];
//         for(int i=height.length-2;i>=0;i--){
//             right[i]=Math.max(height[i],right[i+1]);
          
//         }
    
//         int ans=0;
//         for(int i=0;i<height.length;i++){
//             ans+=Math.min(left[i],right[i])-height[i];
//         }
//         return ans;
